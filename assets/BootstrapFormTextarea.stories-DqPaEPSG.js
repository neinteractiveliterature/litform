import{j as m}from"./jsx-runtime-OAISXtky.js";import{r as y}from"./index-qVDZzPEr.js";import{F as T}from"./FormGroupWithLabel-D8mMHxtJ.js";import"./HelpText-DdXOOL8t.js";function v(e){const{onTextChange:r,...o}=e;return{onTextChange:r,textareaAttributes:o}}function s(e){const{name:r}=e,o=y.useId(),{onTextChange:h,textareaAttributes:x}=v(e),b=g=>h(g.target.value);return m.jsx("textarea",{className:"form-control",id:o,name:r,onChange:b,...x})}const u=T(s);try{s.displayName="BootstrapFormTextarea",s.__docgenInfo={description:"",displayName:"BootstrapFormTextarea",props:{label:{defaultValue:null,description:"the content of the label that will appear with the element",name:"label",required:!0,type:{name:"ReactNode | ReactNode[]"}},helpText:{defaultValue:null,description:"if present, this content will appear below the input",name:"helpText",required:!1,type:{name:"ReactNode | ReactNode[]"}},wrapperDivClassName:{defaultValue:null,description:"the class name to apply to the wrapper div; will use 'mb-3' if not specified",name:"wrapperDivClassName",required:!1,type:{name:"string | undefined"}},labelClassName:{defaultValue:null,description:"the class name to apply to the label element; will use 'form-label' if not specified",name:"labelClassName",required:!1,type:{name:"string | undefined"}},invalidFeedback:{defaultValue:null,description:`if present, the invalid field feedback that will render with the element.  Typically
for Bootstrap form controls, the form element must have 'is-invalid' in its class name
for this to appear.`,name:"invalidFeedback",required:!1,type:{name:"ReactNode | ReactNode[]"}},onTextChange:{defaultValue:null,description:"",name:"onTextChange",required:!0,type:{name:"(text: string) => void"}}}}}catch{}const w={title:"Forms/BootstrapFormTextarea",component:u,argTypes:{label:{control:"text"},hideLabel:{control:"boolean"},helpText:{control:"text"},invalidFeedback:{control:"text"}},parameters:{docs:{description:{component:"A `<textarea>` tag and a matching `<label>`, styled for Bootstrap.  All normal\n          properties of `<textarea>` except `onChange` are supported, so you can pass `value={...}`,\n          `className={...}`, etc.  To listen for changes, use `onTextChange`."}}}},f=e=>m.jsx(u,{...e}),t=f.bind({});t.args={label:"Enter your life story here:"};const a=f.bind({});a.args={label:"Enter your life story here:",className:"form-control is-invalid",invalidFeedback:"Invalid life story."};var n,l,i;t.parameters={...t.parameters,docs:{...(n=t.parameters)==null?void 0:n.docs,source:{originalSource:"args => <BootstrapFormTextarea {...args} />",...(i=(l=t.parameters)==null?void 0:l.docs)==null?void 0:i.source}}};var p,c,d;a.parameters={...a.parameters,docs:{...(p=a.parameters)==null?void 0:p.docs,source:{originalSource:"args => <BootstrapFormTextarea {...args} />",...(d=(c=a.parameters)==null?void 0:c.docs)==null?void 0:d.source}}};const _=["Basic","Invalid"];export{t as Basic,a as Invalid,_ as __namedExportsOrder,w as default};
