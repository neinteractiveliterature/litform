import{j as t}from"./jsx-runtime-OAISXtky.js";import{F as v}from"./FormGroupWithLabel-D8mMHxtJ.js";import"./index-qVDZzPEr.js";import"./HelpText-DdXOOL8t.js";function g(e){const{onValueChange:n,...r}=e;return{onValueChange:n,selectAttributes:r}}function l(e){const{onValueChange:n,selectAttributes:r}=g(e),f=b=>n(b.target.value);return t.jsx("select",{...r,className:e.className??"form-select",onChange:f})}const m=v(l);try{l.displayName="BootstrapFormSelect",l.__docgenInfo={description:"",displayName:"BootstrapFormSelect",props:{label:{defaultValue:null,description:"the content of the label that will appear with the element",name:"label",required:!0,type:{name:"ReactNode | ReactNode[]"}},helpText:{defaultValue:null,description:"if present, this content will appear below the input",name:"helpText",required:!1,type:{name:"ReactNode | ReactNode[]"}},wrapperDivClassName:{defaultValue:null,description:"the class name to apply to the wrapper div; will use 'mb-3' if not specified",name:"wrapperDivClassName",required:!1,type:{name:"string | undefined"}},labelClassName:{defaultValue:null,description:"the class name to apply to the label element; will use 'form-label' if not specified",name:"labelClassName",required:!1,type:{name:"string | undefined"}},invalidFeedback:{defaultValue:null,description:`if present, the invalid field feedback that will render with the element.  Typically
for Bootstrap form controls, the form element must have 'is-invalid' in its class name
for this to appear.`,name:"invalidFeedback",required:!1,type:{name:"ReactNode | ReactNode[]"}},onValueChange:{defaultValue:null,description:"",name:"onValueChange",required:!0,type:{name:"(value: string) => void"}}}}}catch{}const w={title:"Forms/BootstrapFormSelect",component:m,argTypes:{label:{control:"text"},hideLabel:{control:"boolean"},helpText:{control:"text"},invalidFeedback:{control:"text"}},parameters:{docs:{description:{component:"A `<select>` tag and a matching `<label>`, styled for Bootstrap.  All normal\n          properties of `<select>` except `onChange` are supported, so you can pass `value={...}`,\n          `className={...}`, etc.  To listen for changes, use `onValueChange`."}}}},h=e=>t.jsxs(m,{...e,children:[t.jsx("option",{value:"1",children:"One"}),t.jsx("option",{value:"2",children:"Two"}),t.jsx("option",{value:"3",children:"Three"}),t.jsx("option",{value:"4",children:"Four"})]}),a=h.bind({});a.args={label:"Bubblegum, bubblegum, in a dish.  How many pieces do you wish?"};const o=h.bind({});o.args={label:"Please do NOT pick a number.",className:"form-control is-invalid",invalidFeedback:"I said don't pick a number!  What is so hard about this."};var s,i,p;a.parameters={...a.parameters,docs:{...(s=a.parameters)==null?void 0:s.docs,source:{originalSource:`args => <BootstrapFormSelect {...args}>
    <option value="1">One</option>
    <option value="2">Two</option>
    <option value="3">Three</option>
    <option value="4">Four</option>
  </BootstrapFormSelect>`,...(p=(i=a.parameters)==null?void 0:i.docs)==null?void 0:p.source}}};var c,d,u;o.parameters={...o.parameters,docs:{...(c=o.parameters)==null?void 0:c.docs,source:{originalSource:`args => <BootstrapFormSelect {...args}>
    <option value="1">One</option>
    <option value="2">Two</option>
    <option value="3">Three</option>
    <option value="4">Four</option>
  </BootstrapFormSelect>`,...(u=(d=o.parameters)==null?void 0:d.docs)==null?void 0:u.source}}};const B=["Basic","Invalid"];export{a as Basic,o as Invalid,B as __namedExportsOrder,w as default};
