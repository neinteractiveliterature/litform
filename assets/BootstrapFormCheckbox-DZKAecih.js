import{j as e}from"./jsx-runtime-Cf8x2fCZ.js";import{r as u}from"./index-DbAYB8d_.js";import{c as o}from"./index-BhvGlQv8.js";function s(a){const{className:l,inputClassName:r,label:i,onChange:c,onCheckedChange:t,type:d,...p}=a,n=u.useId(),h=c||(t?m=>{t(m.target.checked)}:()=>{});return e.jsx("div",{className:o("form-check",l),children:e.jsxs("label",{className:"form-check-label",htmlFor:n,children:[e.jsx("input",{className:o("form-check-input",r),id:n,onChange:h,type:d??"checkbox",...p})," ",i]})})}try{s.displayName="BootstrapFormCheckbox",s.__docgenInfo={description:"",displayName:"BootstrapFormCheckbox",props:{label:{defaultValue:null,description:"the content of the label that will appear beside the element",name:"label",required:!0,type:{name:"ReactNode | ReactNode[]"}},onCheckedChange:{defaultValue:null,description:`if present, this will be called each time this input is checked or unchecked.  It's an
easier alternative to onChange that avoids having to deal with DOM events.`,name:"onCheckedChange",required:!1,type:{name:"((value: boolean) => void) | undefined"}},inputClassName:{defaultValue:null,description:"the className that will be applied to the input itself",name:"inputClassName",required:!1,type:{name:"string | undefined"}}}}}catch{}export{s as B};
